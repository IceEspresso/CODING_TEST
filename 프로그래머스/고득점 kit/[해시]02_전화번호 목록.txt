//brute force
class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        
        for(int i =0; i<phone_book.length; i++){
            for(int j =0; j<phone_book.length; j++){
                if(i == j) continue;
                if(phone_book[j].indexOf(phone_book[i])==0){//접두어라면
                    return false;   
                }
            }
        }
        
        return answer;
    }
}

//sort
import java.util.Arrays;

class Solution {
    public boolean solution(String[] phone_book) {
        boolean answer = true;
        
        Arrays.sort(phone_book);
        
        for (int i = 0; i < phone_book.length - 1; i++) {
            if (phone_book[i + 1].startsWith(phone_book[i])) 
                return false;
        }
   
        return true;
    }
}

//map
import java.util.HashMap; 
import java.util.Map; 

class Solution { 
    public boolean solution(String[] phoneBook) { 
        // 1. HashMap을 선언한다. 
        Map<String, Integer> map = new HashMap<>(); 
        
        // 2. 모든 전화번호를 HashMap에 넣는다. 
        for (int i = 0; i < phoneBook.length; i++) map.put(phoneBook[i], i);
        // 3. 모든 전화번호의 substring이 HashMap에 존재하는지 확인한다. 
        for (int i = 0; i < phoneBook.length; i++) 
            for (int j = 0; j < phoneBook[i].length(); j++) 
                if (map.containsKey(phoneBook[i].substring(0, j))) 
                    return false; return true; 
    } 
}



